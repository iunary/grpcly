// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: proto/passworder.proto

package passworderpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PassworderClient is the client API for Passworder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassworderClient interface {
	Generate(ctx context.Context, in *PassworderRequest, opts ...grpc.CallOption) (Passworder_GenerateClient, error)
}

type passworderClient struct {
	cc grpc.ClientConnInterface
}

func NewPassworderClient(cc grpc.ClientConnInterface) PassworderClient {
	return &passworderClient{cc}
}

func (c *passworderClient) Generate(ctx context.Context, in *PassworderRequest, opts ...grpc.CallOption) (Passworder_GenerateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Passworder_ServiceDesc.Streams[0], "/passworder.Passworder/Generate", opts...)
	if err != nil {
		return nil, err
	}
	x := &passworderGenerateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Passworder_GenerateClient interface {
	Recv() (*PassworderResponse, error)
	grpc.ClientStream
}

type passworderGenerateClient struct {
	grpc.ClientStream
}

func (x *passworderGenerateClient) Recv() (*PassworderResponse, error) {
	m := new(PassworderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PassworderServer is the server API for Passworder service.
// All implementations must embed UnimplementedPassworderServer
// for forward compatibility
type PassworderServer interface {
	Generate(*PassworderRequest, Passworder_GenerateServer) error
	mustEmbedUnimplementedPassworderServer()
}

// UnimplementedPassworderServer must be embedded to have forward compatible implementations.
type UnimplementedPassworderServer struct {
}

func (UnimplementedPassworderServer) Generate(*PassworderRequest, Passworder_GenerateServer) error {
	return status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedPassworderServer) mustEmbedUnimplementedPassworderServer() {}

// UnsafePassworderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassworderServer will
// result in compilation errors.
type UnsafePassworderServer interface {
	mustEmbedUnimplementedPassworderServer()
}

func RegisterPassworderServer(s grpc.ServiceRegistrar, srv PassworderServer) {
	s.RegisterService(&Passworder_ServiceDesc, srv)
}

func _Passworder_Generate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PassworderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PassworderServer).Generate(m, &passworderGenerateServer{stream})
}

type Passworder_GenerateServer interface {
	Send(*PassworderResponse) error
	grpc.ServerStream
}

type passworderGenerateServer struct {
	grpc.ServerStream
}

func (x *passworderGenerateServer) Send(m *PassworderResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Passworder_ServiceDesc is the grpc.ServiceDesc for Passworder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Passworder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "passworder.Passworder",
	HandlerType: (*PassworderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Generate",
			Handler:       _Passworder_Generate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/passworder.proto",
}
