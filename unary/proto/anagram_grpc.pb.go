// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: proto/anagram.proto

package anagrampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnagramClient is the client API for Anagram service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnagramClient interface {
	Check(ctx context.Context, in *AnagramRequest, opts ...grpc.CallOption) (*AnagramResponse, error)
}

type anagramClient struct {
	cc grpc.ClientConnInterface
}

func NewAnagramClient(cc grpc.ClientConnInterface) AnagramClient {
	return &anagramClient{cc}
}

func (c *anagramClient) Check(ctx context.Context, in *AnagramRequest, opts ...grpc.CallOption) (*AnagramResponse, error) {
	out := new(AnagramResponse)
	err := c.cc.Invoke(ctx, "/anagram.Anagram/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnagramServer is the server API for Anagram service.
// All implementations must embed UnimplementedAnagramServer
// for forward compatibility
type AnagramServer interface {
	Check(context.Context, *AnagramRequest) (*AnagramResponse, error)
	mustEmbedUnimplementedAnagramServer()
}

// UnimplementedAnagramServer must be embedded to have forward compatible implementations.
type UnimplementedAnagramServer struct {
}

func (UnimplementedAnagramServer) Check(context.Context, *AnagramRequest) (*AnagramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedAnagramServer) mustEmbedUnimplementedAnagramServer() {}

// UnsafeAnagramServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnagramServer will
// result in compilation errors.
type UnsafeAnagramServer interface {
	mustEmbedUnimplementedAnagramServer()
}

func RegisterAnagramServer(s grpc.ServiceRegistrar, srv AnagramServer) {
	s.RegisterService(&Anagram_ServiceDesc, srv)
}

func _Anagram_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnagramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnagramServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anagram.Anagram/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnagramServer).Check(ctx, req.(*AnagramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Anagram_ServiceDesc is the grpc.ServiceDesc for Anagram service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Anagram_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anagram.Anagram",
	HandlerType: (*AnagramServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Anagram_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/anagram.proto",
}
